---
import { defaultComponents, toHTML } from '@portabletext/to-html';
import { differenceInDays, format, formatDistanceToNow, isFuture } from 'date-fns';
import locale from 'date-fns/locale/nl';
import CategoryBadge from '../../../../components/category-badge.astro';
import SanityImage from '../../../../components/sanity-image.astro';
import Layout from '../../../../layouts/layout.astro';
import { attachment, figure, player } from '../../../../lib/portable-text';
import * as sanity from '../../../../lib/sanity';
import type { Article } from '../../../../lib/sanity.gen';
import { categoryUrl } from '../../../../lib/util';

type SanityData = {
  _id: string;
  categories: sanity.CategoryFragment[];
  mainImage: sanity.ImageFragment;
  publishedAt: Article['publishedAt'];
  title: Article['title'];
  body: Article['body'];
  hidden: Article['hidden'];
};

const slug = Astro.params.slug;

const article = await sanity.client.fetch<SanityData>(
  /* groq */ `
    *[_type == "article" && slug.current == $slug][0] {
      _id,
      categories[]-> { ${sanity.fragments.category} },
      mainImage { ${sanity.fragments.image} },
      publishedAt,
      title,
      body,
      hidden,
    }
  `,
  { slug },
);

if (!article || !article.publishedAt || isFuture(new Date(article.publishedAt)) || article.hidden) {
  // TODO
  new Response('Not found', { status: 404 });
}

const { categories, mainImage, publishedAt, title, body } = article;

const formattedDate =
  differenceInDays(new Date(publishedAt!), new Date()) > 3
    ? formatDistanceToNow(new Date(publishedAt!), { locale })
    : format(new Date(publishedAt!), 'd MMMM yyyy', { locale });
---

<Layout title={article.title ?? ''}>
  <article class="[ article ] [ stack ]">
    {
      mainImage && (
        <div class="article__main-image">
          <SanityImage {...mainImage} aspectRatioOverride={16 / 9} />
        </div>
      )
    }

    <div class="[ article__text ] [ stack ]">
      <header class="[ article__header ] [ stack ]">
        <h2 class="article__title">{title}</h2>
        <div class="[ article__info ] [ cluster ]">
          <div class="article__published-at">{formattedDate}</div>
          {
            !!categories?.length && (
              <ul class="article__categories">
                {categories.map((category) => (
                  <li>
                    <a href={categoryUrl(category)}>
                      <CategoryBadge category={category} />
                    </a>
                  </li>
                ))}
              </ul>
            )
          }
        </div>
      </header>

      <div
        class="[ article__body ] [ stack ]"
        set:html={toHTML(body, {
          components: {
            block: (props) => {
              const { children, value } = props;
              const style = value.style || 'normal';

              if (style === 'h2') {
                return `<h3>${children}</h3>`;
              }

              if (style === 'h3') {
                return `<h4>${children}</h4>`;
              }

              return (defaultComponents.block as any).normal(props);
            },
            types: { attachment, figure, player },
          },
        })}
      />
    </div>
  </article>
</Layout>

<style>
  .article {
    align-items: center;
  }

  .article__main-image {
    align-self: stretch;
  }

  .article__text {
    gap: var(--font-size-base);
  }

  .article__header {
    border: 2px solid;
    padding: var(--size-2);
  }

  .article__title {
    max-width: var(--size-content-1);
    font-size: var(--font-size-xxl);
    line-height: 1;
  }

  .article__published-at {
    color: var(--gray-6);
    font-size: var(--font-size-sm);
    text-transform: capitalize;
  }

  .article__categories {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .article__body {
    --space: var(--font-size-base);

    max-width: var(--size-content-3);
    line-height: 1.6;

    & :global(h2),
    & :global(h3),
    & :global(h4) {
      margin-top: var(--space);
      margin-bottom: calc(var(--space) * -0.5);
      max-width: var(--size-content-2);
      line-height: 1;
    }

    & :global(h3) {
      font-size: var(--font-size-lg);
    }

    & :global(h4) {
      font-size: var(--font-size-md);
    }

    & :global(.figure) {
      margin-inline: calc(var(--space) * -1);
    }

    & :global(.player) {
      display: flex;
      justify-content: stretch;
      align-self: stretch;
      margin-inline: calc(var(--space) * -1);
      margin-block: var(--space);

      & > :global(*) {
        width: 100%;
        height: 100%;
      }
    }

    & :global(.player[data-type='video']) {
      aspect-ratio: 16 / 9;
    }

    & :global(.player[data-type='soundcloud']) {
      min-height: 166px;
    }
  }
</style>
